package in.blazingk.midifreqanalyzer;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import javax.sound.midi.MidiEvent;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequence;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.Track;

public class FreqAnalyzer {
	
	
	//The key for this integer is note1 * 1000 + note2
	public static HashMap<Integer, Integer> sequenceCount = new HashMap<Integer, Integer>();
	public static ArrayList<Node> nodes = new ArrayList<Node>();
	public static String[] filenames = {"song.mid"};
	public static void main(String[] args) throws Exception{
		for (String s: filenames){
			analyzeSong(new File(s));
		}
		for (int i = 0; i < sequenceCount.keySet().size(); i++){
			int key = (Integer)sequenceCount.keySet().toArray()[i];
			int total = sequenceCount.get(key);
			//System.out.println((key/1000)+"->"+(key%1000)+": "+((float)total/(float)sum));
			if (getNode(key/1000) == null){
				Node n = new Node();
				n.midivalue = key/1000;
				nodes.add(n);
			}
			if (getNode(key%1000) == null){
				Node n = new Node();
				n.midivalue = key%1000;
				nodes.add(n);
			}
			if (sequenceCount.get(key) != null){
				getNode(key/1000).connection.put(getNode(key%1000), (double)total);
			}
			if (getNode(key%1000) == null){
				System.out.println("WTF");
			}
			
		}
		for (int i = 0; i < nodes.size(); i++){
			if (nodes.get(i).connection.size() == 0){
				continue;
			}
			System.out.println("Node: "+nodes.get(i).midivalue+" - size "+nodes.get(i).connection.size());
			for (int y = 0; y < nodes.get(i).connection.keySet().size(); y++){
				Node cT = ((Node)nodes.get(i).connection.keySet().toArray()[y]);
				int connectedTo = cT.midivalue;
				if (nodes.get(y).connection.get(cT) != null){
					System.out.println("\t"+connectedTo+": "+nodes.get(y).connection.get(cT));
				}
			}
		}
		
		
		
		
	}
	
	public static Node getNode(int midi){
		for (int i = 0; i < nodes.size(); i++){
			if (nodes.get(i).midivalue == midi){
				return nodes.get(i);
			}
		}
		return null;
	}
	
	
	public static void analyzeSong(File f) throws Exception {
		Sequence sequence = MidiSystem.getSequence(f);
		for (Track track: sequence.getTracks()){
			ArrayList<Integer> noteValues = new ArrayList<Integer>();
			for (int i = 0; i < track.size(); i++){
				MidiEvent event = track.get(i);
				if (event.getMessage() instanceof ShortMessage){
					ShortMessage sm = (ShortMessage) event.getMessage();
					if (sm.getCommand() == 0x90){ //Note on
						noteValues.add(sm.getData1());
					}
				}
			}
			if (noteValues.size() > 1){
				for (int i = 1; i < noteValues.size(); i++){
					int lastValue = noteValues.get(i-1);
					int thisValue = noteValues.get(i);
					if (sequenceCount.containsKey((lastValue*1000)+thisValue)){
					sequenceCount.put((lastValue*1000)+thisValue, sequenceCount.get((lastValue*1000)+thisValue)+1);
					}else{
					sequenceCount.put((lastValue*1000)+thisValue, 1);	
					}
				}
			}
		}
	}
	
	
	

}
