package in.blazingk.midifreqanalyzer;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import javax.sound.midi.MidiEvent;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequence;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.Track;

public class FreqAnalyzer {
	
	
	//The key for this integer is note1 * 1000 + note2
	public static HashMap<Integer, Integer> sequenceCount = new HashMap<Integer, Integer>();
	public static ArrayList<Node> nodes = new ArrayList<Node>();
	public static ArrayList<Integer> allMidiNumbers = new ArrayList<Integer>();
	public static boolean printZeros = true;
	public static String[] filenames = {"song.mid", "Misirlou.mid", "whoyougonnacall.mid"};
	public static void main(String[] args) throws Exception{
		for (String s: filenames){
			analyzeSong(new File(s));
		}
		for (int i = 0; i < sequenceCount.keySet().size(); i++){
			int key = (Integer)sequenceCount.keySet().toArray()[i];
			if (getNode(key/1000) == null){
				Node n = new Node();
				n.midivalue = key/1000;
				nodes.add(n);
				allMidiNumbers.add(key/1000);
			}
			getNode(key/1000).connection.put(key%1000, (double)sequenceCount.get(key));
		}
		
		//Bubble Sort, because who need efficiency
		for (int i = 0; i < nodes.size(); i++){
			for (int y = 0; y < nodes.size()-1; y++){
				if (nodes.get(y).midivalue > nodes.get(y+1).midivalue){
					Node temp = nodes.get(y);
					nodes.set(y, nodes.get(y+1));
					nodes.set(y+1, temp);
				}
			}
		}
		System.out.println("(make-markov-chain ");
		for (int i = 0; i < nodes.size(); i++){
			nodes.get(i).normalizeNode();
			nodes.get(i).print();
		}
		System.out.println(" 0");
		
		
		
		
	}
	
	public static Node getNode(int midi){
		for (int i = 0; i < nodes.size(); i++){
			if (nodes.get(i).midivalue == midi){
				return nodes.get(i);
			}
		}
		return null;
	}
	
	
	public static void analyzeSong(File f) throws Exception {
		Sequence sequence = MidiSystem.getSequence(f);
		for (Track track: sequence.getTracks()){
			ArrayList<Integer> noteValues = new ArrayList<Integer>();
			for (int i = 0; i < track.size(); i++){
				MidiEvent event = track.get(i);
				if (event.getMessage() instanceof ShortMessage){
					ShortMessage sm = (ShortMessage) event.getMessage();
					if (sm.getCommand() == 0x90){ //Note on
						noteValues.add(sm.getData1());
					}
				}
			}
			if (noteValues.size() > 1){
				for (int i = 1; i < noteValues.size(); i++){
					int lastValue = noteValues.get(i-1);
					int thisValue = noteValues.get(i);
					if (sequenceCount.containsKey((lastValue*1000)+thisValue)){
					sequenceCount.put((lastValue*1000)+thisValue, sequenceCount.get((lastValue*1000)+thisValue)+1);
					}else{
					sequenceCount.put((lastValue*1000)+thisValue, 1);	
					}
				}
			}
		}
	}
	
	
	

}
